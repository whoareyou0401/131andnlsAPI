!function(e,i,n,t){"use strict";i="undefined"!=typeof i&&i.Math==Math?i:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),e.fn.dimmer=function(i){var o,a=e(this),r=(new Date).getTime(),s=[],m=arguments[0],d="string"==typeof m,c=[].slice.call(arguments,1);return a.each(function(){var u,l,f,g=e.isPlainObject(i)?e.extend(!0,{},e.fn.dimmer.settings,i):e.extend({},e.fn.dimmer.settings),p=g.selector,h=g.namespace,b=g.className,v=g.error,y="."+h,C="module-"+h,w=a.selector||"",S="ontouchstart"in n.documentElement?"touchstart":"click",D=e(this),T=this,N=D.data(C);f={preinitialize:function(){f.is.dimmer()?(l=D.parent(),u=D):(l=D,u=f.has.dimmer()?g.dimmerName?l.find(p.dimmer).filter("."+g.dimmerName):l.find(p.dimmer):f.create(),f.set.variation())},initialize:function(){f.debug("Initializing dimmer",g),f.bind.events(),f.set.dimmable(),f.instantiate()},instantiate:function(){f.verbose("Storing instance of module",f),N=f,D.data(C,N)},destroy:function(){f.verbose("Destroying previous module",u),f.unbind.events(),f.remove.variation(),l.off(y)},bind:{events:function(){"hover"==g.on?l.on("mouseenter"+y,f.show).on("mouseleave"+y,f.hide):"click"==g.on&&l.on(S+y,f.toggle),f.is.page()&&(f.debug("Setting as a page dimmer",l),f.set.pageDimmer()),f.is.closable()&&(f.verbose("Adding dimmer close event",u),l.on(S+y,p.dimmer,f.event.click))}},unbind:{events:function(){D.removeData(C),l.off(y)}},event:{click:function(i){f.verbose("Determining if event occured on dimmer",i),(0===u.find(i.target).length||e(i.target).is(p.content))&&(f.hide(),i.stopImmediatePropagation())}},addContent:function(i){var n=e(i);f.debug("Add content to dimmer",n),n.parent()[0]!==u[0]&&n.detach().appendTo(u)},create:function(){var i=e(g.template.dimmer());return g.dimmerName&&(f.debug("Creating named dimmer",g.dimmerName),i.addClass(g.dimmerName)),i.appendTo(l),i},show:function(i){i=e.isFunction(i)?i:function(){},f.debug("Showing dimmer",u,g),f.is.dimmed()&&!f.is.animating()||!f.is.enabled()?f.debug("Dimmer is already shown or disabled"):(f.animate.show(i),g.onShow.call(T),g.onChange.call(T))},hide:function(i){i=e.isFunction(i)?i:function(){},f.is.dimmed()||f.is.animating()?(f.debug("Hiding dimmer",u),f.animate.hide(i),g.onHide.call(T),g.onChange.call(T)):f.debug("Dimmer is not visible")},toggle:function(){f.verbose("Toggling dimmer visibility",u),f.is.dimmed()?f.hide():f.show()},animate:{show:function(i){i=e.isFunction(i)?i:function(){},g.useCSS&&e.fn.transition!==t&&u.transition("is supported")?("auto"!==g.opacity&&f.set.opacity(),u.transition({animation:g.transition+" in",queue:!1,duration:f.get.duration(),useFailSafe:!0,onStart:function(){f.set.dimmed()},onComplete:function(){f.set.active(),i()}})):(f.verbose("Showing dimmer animation with javascript"),f.set.dimmed(),"auto"==g.opacity&&(g.opacity=.8),u.stop().css({opacity:0,width:"100%",height:"100%"}).fadeTo(f.get.duration(),g.opacity,function(){u.removeAttr("style"),f.set.active(),i()}))},hide:function(i){i=e.isFunction(i)?i:function(){},g.useCSS&&e.fn.transition!==t&&u.transition("is supported")?(f.verbose("Hiding dimmer with css"),u.transition({animation:g.transition+" out",queue:!1,duration:f.get.duration(),useFailSafe:!0,onStart:function(){f.remove.dimmed()},onComplete:function(){f.remove.active(),i()}})):(f.verbose("Hiding dimmer with javascript"),f.remove.dimmed(),u.stop().fadeOut(f.get.duration(),function(){f.remove.active(),u.removeAttr("style"),i()}))}},get:{dimmer:function(){return u},duration:function(){return"object"==typeof g.duration?f.is.active()?g.duration.hide:g.duration.show:g.duration}},has:{dimmer:function(){return g.dimmerName?D.find(p.dimmer).filter("."+g.dimmerName).length>0:D.find(p.dimmer).length>0}},is:{active:function(){return u.hasClass(b.active)},animating:function(){return u.is(":animated")||u.hasClass(b.animating)},closable:function(){return"auto"==g.closable?"hover"!=g.on:g.closable},dimmer:function(){return D.hasClass(b.dimmer)},dimmable:function(){return D.hasClass(b.dimmable)},dimmed:function(){return l.hasClass(b.dimmed)},disabled:function(){return l.hasClass(b.disabled)},enabled:function(){return!f.is.disabled()},page:function(){return l.is("body")},pageDimmer:function(){return u.hasClass(b.pageDimmer)}},can:{show:function(){return!u.hasClass(b.disabled)}},set:{opacity:function(e){var i=u.css("background-color"),n=i.split(","),t=n&&3==n.length,o=n&&4==n.length;e=0===g.opacity?0:g.opacity||e,t||o?(n[3]=e+")",i=n.join(",")):i="rgba(0, 0, 0, "+e+")",f.debug("Setting opacity to",e),u.css("background-color",i)},active:function(){u.addClass(b.active)},dimmable:function(){l.addClass(b.dimmable)},dimmed:function(){l.addClass(b.dimmed)},pageDimmer:function(){u.addClass(b.pageDimmer)},disabled:function(){u.addClass(b.disabled)},variation:function(e){e=e||g.variation,e&&u.addClass(e)}},remove:{active:function(){u.removeClass(b.active)},dimmed:function(){l.removeClass(b.dimmed)},disabled:function(){u.removeClass(b.disabled)},variation:function(e){e=e||g.variation,e&&u.removeClass(e)}},setting:function(i,n){if(f.debug("Changing setting",i,n),e.isPlainObject(i))e.extend(!0,g,i);else{if(n===t)return g[i];e.isPlainObject(g[i])?e.extend(!0,g[i],n):g[i]=n}},internal:function(i,n){if(e.isPlainObject(i))e.extend(!0,f,i);else{if(n===t)return f[i];f[i]=n}},debug:function(){!g.silent&&g.debug&&(g.performance?f.performance.log(arguments):(f.debug=Function.prototype.bind.call(console.info,console,g.name+":"),f.debug.apply(console,arguments)))},verbose:function(){!g.silent&&g.verbose&&g.debug&&(g.performance?f.performance.log(arguments):(f.verbose=Function.prototype.bind.call(console.info,console,g.name+":"),f.verbose.apply(console,arguments)))},error:function(){g.silent||(f.error=Function.prototype.bind.call(console.error,console,g.name+":"),f.error.apply(console,arguments))},performance:{log:function(e){var i,n,t;g.performance&&(i=(new Date).getTime(),t=r||i,n=i-t,r=i,s.push({Name:e[0],Arguments:[].slice.call(e,1)||"",Element:T,"Execution Time":n})),clearTimeout(f.performance.timer),f.performance.timer=setTimeout(f.performance.display,500)},display:function(){var i=g.name+":",n=0;r=!1,clearTimeout(f.performance.timer),e.each(s,function(e,i){n+=i["Execution Time"]}),i+=" "+n+"ms",w&&(i+=" '"+w+"'"),a.length>1&&(i+=" ("+a.length+")"),(console.group!==t||console.table!==t)&&s.length>0&&(console.groupCollapsed(i),console.table?console.table(s):e.each(s,function(e,i){console.log(i.Name+": "+i["Execution Time"]+"ms")}),console.groupEnd()),s=[]}},invoke:function(i,n,a){var r,s,m,d=N;return n=n||c,a=T||a,"string"==typeof i&&d!==t&&(i=i.split(/[\. ]/),r=i.length-1,e.each(i,function(n,o){var a=n!=r?o+i[n+1].charAt(0).toUpperCase()+i[n+1].slice(1):i;if(e.isPlainObject(d[a])&&n!=r)d=d[a];else{if(d[a]!==t)return s=d[a],!1;if(!e.isPlainObject(d[o])||n==r)return d[o]!==t?(s=d[o],!1):(f.error(v.method,i),!1);d=d[o]}})),e.isFunction(s)?m=s.apply(a,n):s!==t&&(m=s),e.isArray(o)?o.push(m):o!==t?o=[o,m]:m!==t&&(o=m),s}},f.preinitialize(),d?(N===t&&f.initialize(),f.invoke(m)):(N!==t&&N.invoke("destroy"),f.initialize())}),o!==t?o:this},e.fn.dimmer.settings={name:"Dimmer",namespace:"dimmer",silent:!1,debug:!1,verbose:!1,performance:!0,dimmerName:!1,variation:!1,closable:"auto",useCSS:!0,transition:"fade",on:!1,opacity:"auto",duration:{show:500,hide:500},onChange:function(){},onShow:function(){},onHide:function(){},error:{method:"The method you called is not defined."},className:{active:"active",animating:"animating",dimmable:"dimmable",dimmed:"dimmed",dimmer:"dimmer",disabled:"disabled",hide:"hide",pageDimmer:"page",show:"show"},selector:{dimmer:"> .ui.dimmer",content:".ui.dimmer > .content, .ui.dimmer > .content > .center"},template:{dimmer:function(){return e("<div />").attr("class","ui dimmer")}}}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9kaW1tZXIuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsImZuIiwiZGltbWVyIiwicGFyYW1ldGVycyIsInJldHVybmVkVmFsdWUiLCIkYWxsTW9kdWxlcyIsInRoaXMiLCJ0aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJwZXJmb3JtYW5jZSIsInF1ZXJ5IiwiYXJndW1lbnRzIiwibWV0aG9kSW52b2tlZCIsInF1ZXJ5QXJndW1lbnRzIiwic2xpY2UiLCJjYWxsIiwiZWFjaCIsIiRkaW1tZXIiLCIkZGltbWFibGUiLCJtb2R1bGUiLCJzZXR0aW5ncyIsImlzUGxhaW5PYmplY3QiLCJleHRlbmQiLCJzZWxlY3RvciIsIm5hbWVzcGFjZSIsImNsYXNzTmFtZSIsImVycm9yIiwiZXZlbnROYW1lc3BhY2UiLCJtb2R1bGVOYW1lc3BhY2UiLCJtb2R1bGVTZWxlY3RvciIsImNsaWNrRXZlbnQiLCJkb2N1bWVudEVsZW1lbnQiLCIkbW9kdWxlIiwiZWxlbWVudCIsImluc3RhbmNlIiwiZGF0YSIsInByZWluaXRpYWxpemUiLCJpcyIsInBhcmVudCIsImhhcyIsImRpbW1lck5hbWUiLCJmaW5kIiwiZmlsdGVyIiwiY3JlYXRlIiwic2V0IiwidmFyaWF0aW9uIiwiaW5pdGlhbGl6ZSIsImRlYnVnIiwiYmluZCIsImV2ZW50cyIsImRpbW1hYmxlIiwiaW5zdGFudGlhdGUiLCJ2ZXJib3NlIiwiZGVzdHJveSIsInVuYmluZCIsInJlbW92ZSIsIm9mZiIsIm9uIiwic2hvdyIsImhpZGUiLCJ0b2dnbGUiLCJwYWdlIiwicGFnZURpbW1lciIsImNsb3NhYmxlIiwiZXZlbnQiLCJjbGljayIsInJlbW92ZURhdGEiLCJ0YXJnZXQiLCJsZW5ndGgiLCJjb250ZW50Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWRkQ29udGVudCIsIiRjb250ZW50IiwiZGV0YWNoIiwiYXBwZW5kVG8iLCIkZWxlbWVudCIsInRlbXBsYXRlIiwiYWRkQ2xhc3MiLCJjYWxsYmFjayIsImlzRnVuY3Rpb24iLCJkaW1tZWQiLCJhbmltYXRpbmciLCJlbmFibGVkIiwiYW5pbWF0ZSIsIm9uU2hvdyIsIm9uQ2hhbmdlIiwib25IaWRlIiwidXNlQ1NTIiwidHJhbnNpdGlvbiIsIm9wYWNpdHkiLCJhbmltYXRpb24iLCJxdWV1ZSIsImR1cmF0aW9uIiwiZ2V0IiwidXNlRmFpbFNhZmUiLCJvblN0YXJ0Iiwib25Db21wbGV0ZSIsImFjdGl2ZSIsInN0b3AiLCJjc3MiLCJ3aWR0aCIsImhlaWdodCIsImZhZGVUbyIsInJlbW92ZUF0dHIiLCJmYWRlT3V0IiwiaGFzQ2xhc3MiLCJkaXNhYmxlZCIsImNhbiIsImNvbG9yIiwiY29sb3JBcnJheSIsInNwbGl0IiwiaXNSR0IiLCJpc1JHQkEiLCJqb2luIiwicmVtb3ZlQ2xhc3MiLCJzZXR0aW5nIiwibmFtZSIsInZhbHVlIiwiaW50ZXJuYWwiLCJzaWxlbnQiLCJsb2ciLCJwcm90b3R5cGUiLCJjb25zb2xlIiwiaW5mbyIsImFwcGx5IiwibWVzc2FnZSIsImN1cnJlbnRUaW1lIiwiZXhlY3V0aW9uVGltZSIsInByZXZpb3VzVGltZSIsInB1c2giLCJOYW1lIiwiQXJndW1lbnRzIiwiRWxlbWVudCIsIkV4ZWN1dGlvbiBUaW1lIiwiY2xlYXJUaW1lb3V0IiwidGltZXIiLCJzZXRUaW1lb3V0IiwiZGlzcGxheSIsInRpdGxlIiwidG90YWxUaW1lIiwiaW5kZXgiLCJncm91cCIsInRhYmxlIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsImludm9rZSIsInBhc3NlZEFyZ3VtZW50cyIsImNvbnRleHQiLCJtYXhEZXB0aCIsImZvdW5kIiwicmVzcG9uc2UiLCJvYmplY3QiLCJkZXB0aCIsImNhbWVsQ2FzZVZhbHVlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJtZXRob2QiLCJpc0FycmF5IiwiYXR0ciIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBVUMsU0FB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S0FBYyxTQUNkNUYsVUFBYyxTQUVkK0YsUUFBYyxFQUNkeEUsT0FBYyxFQUNkSyxTQUFjLEVBQ2QzQyxhQUFjLEVBR2QrQixZQUFjLEVBR2RLLFdBQWMsRUFHZGtCLFNBQWMsT0FHZHdCLFFBQWMsRUFHZEMsV0FBYyxPQUdkL0IsSUFBYyxFQUdkZ0MsUUFBYyxPQUdkRyxVQUNFbEMsS0FBTyxJQUNQQyxLQUFPLEtBR1QwQixTQUFjLGFBQ2RELE9BQWMsYUFDZEUsT0FBYyxhQUVkNUQsT0FDRWtJLE9BQVcseUNBR2JuSSxXQUNFd0UsT0FBYSxTQUNiaEIsVUFBYSxZQUNiL0IsU0FBYSxXQUNiOEIsT0FBYSxTQUNiL0UsT0FBYSxTQUNieUcsU0FBYSxXQUNiL0MsS0FBYSxPQUNiRyxXQUFhLE9BQ2JKLEtBQWEsUUFHZm5DLFVBQ0V0QixPQUFXLGVBQ1hvRSxRQUFXLDBEQUdiTyxVQUNFM0UsT0FBUSxXQUNQLE1BQU9SLEdBQUUsV0FBV3FLLEtBQUssUUFBUyxpQkFNbkNDLE9BQVFySyxPQUFRQyIsImZpbGUiOiJ2ZW5kb3IvZGltbWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiAjIFNlbWFudGljIFVJIDIuMi43IC0gRGltbWVyXG4gKiBodHRwOi8vZ2l0aHViLmNvbS9zZW1hbnRpYy1vcmcvc2VtYW50aWMtdWkvXG4gKlxuICpcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqL1xuXG47KGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbndpbmRvdyA9ICh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGgpXG4gID8gd2luZG93XG4gIDogKHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoKVxuICAgID8gc2VsZlxuICAgIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKVxuO1xuXG4kLmZuLmRpbW1lciA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHtcbiAgdmFyXG4gICAgJGFsbE1vZHVsZXMgICAgID0gJCh0aGlzKSxcblxuICAgIHRpbWUgICAgICAgICAgICA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgIHBlcmZvcm1hbmNlICAgICA9IFtdLFxuXG4gICAgcXVlcnkgICAgICAgICAgID0gYXJndW1lbnRzWzBdLFxuICAgIG1ldGhvZEludm9rZWQgICA9ICh0eXBlb2YgcXVlcnkgPT0gJ3N0cmluZycpLFxuICAgIHF1ZXJ5QXJndW1lbnRzICA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcblxuICAgIHJldHVybmVkVmFsdWVcbiAgO1xuXG4gICRhbGxNb2R1bGVzXG4gICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXJcbiAgICAgICAgc2V0dGluZ3MgICAgICAgID0gKCAkLmlzUGxhaW5PYmplY3QocGFyYW1ldGVycykgKVxuICAgICAgICAgID8gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZGltbWVyLnNldHRpbmdzLCBwYXJhbWV0ZXJzKVxuICAgICAgICAgIDogJC5leHRlbmQoe30sICQuZm4uZGltbWVyLnNldHRpbmdzKSxcblxuICAgICAgICBzZWxlY3RvciAgICAgICAgPSBzZXR0aW5ncy5zZWxlY3RvcixcbiAgICAgICAgbmFtZXNwYWNlICAgICAgID0gc2V0dGluZ3MubmFtZXNwYWNlLFxuICAgICAgICBjbGFzc05hbWUgICAgICAgPSBzZXR0aW5ncy5jbGFzc05hbWUsXG4gICAgICAgIGVycm9yICAgICAgICAgICA9IHNldHRpbmdzLmVycm9yLFxuXG4gICAgICAgIGV2ZW50TmFtZXNwYWNlICA9ICcuJyArIG5hbWVzcGFjZSxcbiAgICAgICAgbW9kdWxlTmFtZXNwYWNlID0gJ21vZHVsZS0nICsgbmFtZXNwYWNlLFxuICAgICAgICBtb2R1bGVTZWxlY3RvciAgPSAkYWxsTW9kdWxlcy5zZWxlY3RvciB8fCAnJyxcblxuICAgICAgICBjbGlja0V2ZW50ICAgICAgPSAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxuICAgICAgICAgID8gJ3RvdWNoc3RhcnQnXG4gICAgICAgICAgOiAnY2xpY2snLFxuXG4gICAgICAgICRtb2R1bGUgPSAkKHRoaXMpLFxuICAgICAgICAkZGltbWVyLFxuICAgICAgICAkZGltbWFibGUsXG5cbiAgICAgICAgZWxlbWVudCAgID0gdGhpcyxcbiAgICAgICAgaW5zdGFuY2UgID0gJG1vZHVsZS5kYXRhKG1vZHVsZU5hbWVzcGFjZSksXG4gICAgICAgIG1vZHVsZVxuICAgICAgO1xuXG4gICAgICBtb2R1bGUgPSB7XG5cbiAgICAgICAgcHJlaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYoIG1vZHVsZS5pcy5kaW1tZXIoKSApIHtcblxuICAgICAgICAgICAgJGRpbW1hYmxlID0gJG1vZHVsZS5wYXJlbnQoKTtcbiAgICAgICAgICAgICRkaW1tZXIgICA9ICRtb2R1bGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJGRpbW1hYmxlID0gJG1vZHVsZTtcbiAgICAgICAgICAgIGlmKCBtb2R1bGUuaGFzLmRpbW1lcigpICkge1xuICAgICAgICAgICAgICBpZihzZXR0aW5ncy5kaW1tZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgJGRpbW1lciA9ICRkaW1tYWJsZS5maW5kKHNlbGVjdG9yLmRpbW1lcikuZmlsdGVyKCcuJyArIHNldHRpbmdzLmRpbW1lck5hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRkaW1tZXIgPSAkZGltbWFibGUuZmluZChzZWxlY3Rvci5kaW1tZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgJGRpbW1lciA9IG1vZHVsZS5jcmVhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZHVsZS5zZXQudmFyaWF0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG1vZHVsZS5kZWJ1ZygnSW5pdGlhbGl6aW5nIGRpbW1lcicsIHNldHRpbmdzKTtcblxuICAgICAgICAgIG1vZHVsZS5iaW5kLmV2ZW50cygpO1xuICAgICAgICAgIG1vZHVsZS5zZXQuZGltbWFibGUoKTtcbiAgICAgICAgICBtb2R1bGUuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbnN0YW50aWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbW9kdWxlLnZlcmJvc2UoJ1N0b3JpbmcgaW5zdGFuY2Ugb2YgbW9kdWxlJywgbW9kdWxlKTtcbiAgICAgICAgICBpbnN0YW5jZSA9IG1vZHVsZTtcbiAgICAgICAgICAkbW9kdWxlXG4gICAgICAgICAgICAuZGF0YShtb2R1bGVOYW1lc3BhY2UsIGluc3RhbmNlKVxuICAgICAgICAgIDtcbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBtb2R1bGUudmVyYm9zZSgnRGVzdHJveWluZyBwcmV2aW91cyBtb2R1bGUnLCAkZGltbWVyKTtcbiAgICAgICAgICBtb2R1bGUudW5iaW5kLmV2ZW50cygpO1xuICAgICAgICAgIG1vZHVsZS5yZW1vdmUudmFyaWF0aW9uKCk7XG4gICAgICAgICAgJGRpbW1hYmxlXG4gICAgICAgICAgICAub2ZmKGV2ZW50TmFtZXNwYWNlKVxuICAgICAgICAgIDtcbiAgICAgICAgfSxcblxuICAgICAgICBiaW5kOiB7XG4gICAgICAgICAgZXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLm9uID09ICdob3ZlcicpIHtcbiAgICAgICAgICAgICAgJGRpbW1hYmxlXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyJyArIGV2ZW50TmFtZXNwYWNlLCBtb2R1bGUuc2hvdylcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUnICsgZXZlbnROYW1lc3BhY2UsIG1vZHVsZS5oaWRlKVxuICAgICAgICAgICAgICA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKHNldHRpbmdzLm9uID09ICdjbGljaycpIHtcbiAgICAgICAgICAgICAgJGRpbW1hYmxlXG4gICAgICAgICAgICAgICAgLm9uKGNsaWNrRXZlbnQgKyBldmVudE5hbWVzcGFjZSwgbW9kdWxlLnRvZ2dsZSlcbiAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIG1vZHVsZS5pcy5wYWdlKCkgKSB7XG4gICAgICAgICAgICAgIG1vZHVsZS5kZWJ1ZygnU2V0dGluZyBhcyBhIHBhZ2UgZGltbWVyJywgJGRpbW1hYmxlKTtcbiAgICAgICAgICAgICAgbW9kdWxlLnNldC5wYWdlRGltbWVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBtb2R1bGUuaXMuY2xvc2FibGUoKSApIHtcbiAgICAgICAgICAgICAgbW9kdWxlLnZlcmJvc2UoJ0FkZGluZyBkaW1tZXIgY2xvc2UgZXZlbnQnLCAkZGltbWVyKTtcbiAgICAgICAgICAgICAgJGRpbW1hYmxlXG4gICAgICAgICAgICAgICAgLm9uKGNsaWNrRXZlbnQgKyBldmVudE5hbWVzcGFjZSwgc2VsZWN0b3IuZGltbWVyLCBtb2R1bGUuZXZlbnQuY2xpY2spXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5iaW5kOiB7XG4gICAgICAgICAgZXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRtb2R1bGVcbiAgICAgICAgICAgICAgLnJlbW92ZURhdGEobW9kdWxlTmFtZXNwYWNlKVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgJGRpbW1hYmxlXG4gICAgICAgICAgICAgIC5vZmYoZXZlbnROYW1lc3BhY2UpXG4gICAgICAgICAgICA7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBtb2R1bGUudmVyYm9zZSgnRGV0ZXJtaW5pbmcgaWYgZXZlbnQgb2NjdXJlZCBvbiBkaW1tZXInLCBldmVudCk7XG4gICAgICAgICAgICBpZiggJGRpbW1lci5maW5kKGV2ZW50LnRhcmdldCkubGVuZ3RoID09PSAwIHx8ICQoZXZlbnQudGFyZ2V0KS5pcyhzZWxlY3Rvci5jb250ZW50KSApIHtcbiAgICAgICAgICAgICAgbW9kdWxlLmhpZGUoKTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZENvbnRlbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXJcbiAgICAgICAgICAgICRjb250ZW50ID0gJChlbGVtZW50KVxuICAgICAgICAgIDtcbiAgICAgICAgICBtb2R1bGUuZGVidWcoJ0FkZCBjb250ZW50IHRvIGRpbW1lcicsICRjb250ZW50KTtcbiAgICAgICAgICBpZigkY29udGVudC5wYXJlbnQoKVswXSAhPT0gJGRpbW1lclswXSkge1xuICAgICAgICAgICAgJGNvbnRlbnQuZGV0YWNoKCkuYXBwZW5kVG8oJGRpbW1lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyXG4gICAgICAgICAgICAkZWxlbWVudCA9ICQoIHNldHRpbmdzLnRlbXBsYXRlLmRpbW1lcigpIClcbiAgICAgICAgICA7XG4gICAgICAgICAgaWYoc2V0dGluZ3MuZGltbWVyTmFtZSkge1xuICAgICAgICAgICAgbW9kdWxlLmRlYnVnKCdDcmVhdGluZyBuYW1lZCBkaW1tZXInLCBzZXR0aW5ncy5kaW1tZXJOYW1lKTtcbiAgICAgICAgICAgICRlbGVtZW50LmFkZENsYXNzKHNldHRpbmdzLmRpbW1lck5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZWxlbWVudFxuICAgICAgICAgICAgLmFwcGVuZFRvKCRkaW1tYWJsZSlcbiAgICAgICAgICA7XG4gICAgICAgICAgcmV0dXJuICRlbGVtZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSAkLmlzRnVuY3Rpb24oY2FsbGJhY2spXG4gICAgICAgICAgICA/IGNhbGxiYWNrXG4gICAgICAgICAgICA6IGZ1bmN0aW9uKCl7fVxuICAgICAgICAgIDtcbiAgICAgICAgICBtb2R1bGUuZGVidWcoJ1Nob3dpbmcgZGltbWVyJywgJGRpbW1lciwgc2V0dGluZ3MpO1xuICAgICAgICAgIGlmKCAoIW1vZHVsZS5pcy5kaW1tZWQoKSB8fCBtb2R1bGUuaXMuYW5pbWF0aW5nKCkpICYmIG1vZHVsZS5pcy5lbmFibGVkKCkgKSB7XG4gICAgICAgICAgICBtb2R1bGUuYW5pbWF0ZS5zaG93KGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHNldHRpbmdzLm9uU2hvdy5jYWxsKGVsZW1lbnQpO1xuICAgICAgICAgICAgc2V0dGluZ3Mub25DaGFuZ2UuY2FsbChlbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZGVidWcoJ0RpbW1lciBpcyBhbHJlYWR5IHNob3duIG9yIGRpc2FibGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSAkLmlzRnVuY3Rpb24oY2FsbGJhY2spXG4gICAgICAgICAgICA/IGNhbGxiYWNrXG4gICAgICAgICAgICA6IGZ1bmN0aW9uKCl7fVxuICAgICAgICAgIDtcbiAgICAgICAgICBpZiggbW9kdWxlLmlzLmRpbW1lZCgpIHx8IG1vZHVsZS5pcy5hbmltYXRpbmcoKSApIHtcbiAgICAgICAgICAgIG1vZHVsZS5kZWJ1ZygnSGlkaW5nIGRpbW1lcicsICRkaW1tZXIpO1xuICAgICAgICAgICAgbW9kdWxlLmFuaW1hdGUuaGlkZShjYWxsYmFjayk7XG4gICAgICAgICAgICBzZXR0aW5ncy5vbkhpZGUuY2FsbChlbGVtZW50KTtcbiAgICAgICAgICAgIHNldHRpbmdzLm9uQ2hhbmdlLmNhbGwoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmRlYnVnKCdEaW1tZXIgaXMgbm90IHZpc2libGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBtb2R1bGUudmVyYm9zZSgnVG9nZ2xpbmcgZGltbWVyIHZpc2liaWxpdHknLCAkZGltbWVyKTtcbiAgICAgICAgICBpZiggIW1vZHVsZS5pcy5kaW1tZWQoKSApIHtcbiAgICAgICAgICAgIG1vZHVsZS5zaG93KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW5pbWF0ZToge1xuICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9ICQuaXNGdW5jdGlvbihjYWxsYmFjaylcbiAgICAgICAgICAgICAgPyBjYWxsYmFja1xuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKCl7fVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgaWYoc2V0dGluZ3MudXNlQ1NTICYmICQuZm4udHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkICYmICRkaW1tZXIudHJhbnNpdGlvbignaXMgc3VwcG9ydGVkJykpIHtcbiAgICAgICAgICAgICAgaWYoc2V0dGluZ3Mub3BhY2l0eSAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgbW9kdWxlLnNldC5vcGFjaXR5KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJGRpbW1lclxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiAgIDogc2V0dGluZ3MudHJhbnNpdGlvbiArICcgaW4nLFxuICAgICAgICAgICAgICAgICAgcXVldWUgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGR1cmF0aW9uICAgIDogbW9kdWxlLmdldC5kdXJhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgdXNlRmFpbFNhZmUgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgb25TdGFydCAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLnNldC5kaW1tZWQoKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuc2V0LmFjdGl2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBtb2R1bGUudmVyYm9zZSgnU2hvd2luZyBkaW1tZXIgYW5pbWF0aW9uIHdpdGggamF2YXNjcmlwdCcpO1xuICAgICAgICAgICAgICBtb2R1bGUuc2V0LmRpbW1lZCgpO1xuICAgICAgICAgICAgICBpZihzZXR0aW5ncy5vcGFjaXR5ID09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLm9wYWNpdHkgPSAwLjg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJGRpbW1lclxuICAgICAgICAgICAgICAgIC5zdG9wKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHkgOiAwLFxuICAgICAgICAgICAgICAgICAgd2lkdGggICA6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgIGhlaWdodCAgOiAnMTAwJSdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mYWRlVG8obW9kdWxlLmdldC5kdXJhdGlvbigpLCBzZXR0aW5ncy5vcGFjaXR5LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICRkaW1tZXIucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgIG1vZHVsZS5zZXQuYWN0aXZlKCk7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9ICQuaXNGdW5jdGlvbihjYWxsYmFjaylcbiAgICAgICAgICAgICAgPyBjYWxsYmFja1xuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKCl7fVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgaWYoc2V0dGluZ3MudXNlQ1NTICYmICQuZm4udHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkICYmICRkaW1tZXIudHJhbnNpdGlvbignaXMgc3VwcG9ydGVkJykpIHtcbiAgICAgICAgICAgICAgbW9kdWxlLnZlcmJvc2UoJ0hpZGluZyBkaW1tZXIgd2l0aCBjc3MnKTtcbiAgICAgICAgICAgICAgJGRpbW1lclxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiAgIDogc2V0dGluZ3MudHJhbnNpdGlvbiArICcgb3V0JyxcbiAgICAgICAgICAgICAgICAgIHF1ZXVlICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBkdXJhdGlvbiAgICA6IG1vZHVsZS5nZXQuZHVyYXRpb24oKSxcbiAgICAgICAgICAgICAgICAgIHVzZUZhaWxTYWZlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG9uU3RhcnQgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5yZW1vdmUuZGltbWVkKCk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLnJlbW92ZS5hY3RpdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kdWxlLnZlcmJvc2UoJ0hpZGluZyBkaW1tZXIgd2l0aCBqYXZhc2NyaXB0Jyk7XG4gICAgICAgICAgICAgIG1vZHVsZS5yZW1vdmUuZGltbWVkKCk7XG4gICAgICAgICAgICAgICRkaW1tZXJcbiAgICAgICAgICAgICAgICAuc3RvcCgpXG4gICAgICAgICAgICAgICAgLmZhZGVPdXQobW9kdWxlLmdldC5kdXJhdGlvbigpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIG1vZHVsZS5yZW1vdmUuYWN0aXZlKCk7XG4gICAgICAgICAgICAgICAgICAkZGltbWVyLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0OiB7XG4gICAgICAgICAgZGltbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkZGltbWVyO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZHVyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodHlwZW9mIHNldHRpbmdzLmR1cmF0aW9uID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGlmKCBtb2R1bGUuaXMuYWN0aXZlKCkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLmR1cmF0aW9uLmhpZGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLmR1cmF0aW9uLnNob3c7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5kdXJhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzOiB7XG4gICAgICAgICAgZGltbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLmRpbW1lck5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICgkbW9kdWxlLmZpbmQoc2VsZWN0b3IuZGltbWVyKS5maWx0ZXIoJy4nICsgc2V0dGluZ3MuZGltbWVyTmFtZSkubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuICggJG1vZHVsZS5maW5kKHNlbGVjdG9yLmRpbW1lcikubGVuZ3RoID4gMCApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpczoge1xuICAgICAgICAgIGFjdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJGRpbW1lci5oYXNDbGFzcyhjbGFzc05hbWUuYWN0aXZlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFuaW1hdGluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKCAkZGltbWVyLmlzKCc6YW5pbWF0ZWQnKSB8fCAkZGltbWVyLmhhc0NsYXNzKGNsYXNzTmFtZS5hbmltYXRpbmcpICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZihzZXR0aW5ncy5jbG9zYWJsZSA9PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgaWYoc2V0dGluZ3Mub24gPT0gJ2hvdmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5jbG9zYWJsZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpbW1lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJG1vZHVsZS5oYXNDbGFzcyhjbGFzc05hbWUuZGltbWVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpbW1hYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkbW9kdWxlLmhhc0NsYXNzKGNsYXNzTmFtZS5kaW1tYWJsZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkaW1tZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRkaW1tYWJsZS5oYXNDbGFzcyhjbGFzc05hbWUuZGltbWVkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkZGltbWFibGUuaGFzQ2xhc3MoY2xhc3NOYW1lLmRpc2FibGVkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICFtb2R1bGUuaXMuZGlzYWJsZWQoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkZGltbWFibGUuaXMoJ2JvZHknKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBhZ2VEaW1tZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRkaW1tZXIuaGFzQ2xhc3MoY2xhc3NOYW1lLnBhZ2VEaW1tZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjYW46IHtcbiAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhJGRpbW1lci5oYXNDbGFzcyhjbGFzc05hbWUuZGlzYWJsZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzZXQ6IHtcbiAgICAgICAgICBvcGFjaXR5OiBmdW5jdGlvbihvcGFjaXR5KSB7XG4gICAgICAgICAgICB2YXJcbiAgICAgICAgICAgICAgY29sb3IgICAgICA9ICRkaW1tZXIuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyksXG4gICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBjb2xvci5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgICBpc1JHQiAgICAgID0gKGNvbG9yQXJyYXkgJiYgY29sb3JBcnJheS5sZW5ndGggPT0gMyksXG4gICAgICAgICAgICAgIGlzUkdCQSAgICAgPSAoY29sb3JBcnJheSAmJiBjb2xvckFycmF5Lmxlbmd0aCA9PSA0KVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgb3BhY2l0eSAgICA9IHNldHRpbmdzLm9wYWNpdHkgPT09IDAgPyAwIDogc2V0dGluZ3Mub3BhY2l0eSB8fCBvcGFjaXR5O1xuICAgICAgICAgICAgaWYoaXNSR0IgfHwgaXNSR0JBKSB7XG4gICAgICAgICAgICAgIGNvbG9yQXJyYXlbM10gPSBvcGFjaXR5ICsgJyknO1xuICAgICAgICAgICAgICBjb2xvciAgICAgICAgID0gY29sb3JBcnJheS5qb2luKCcsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgY29sb3IgPSAncmdiYSgwLCAwLCAwLCAnICsgb3BhY2l0eSArICcpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZHVsZS5kZWJ1ZygnU2V0dGluZyBvcGFjaXR5IHRvJywgb3BhY2l0eSk7XG4gICAgICAgICAgICAkZGltbWVyLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGNvbG9yKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFjdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkZGltbWVyLmFkZENsYXNzKGNsYXNzTmFtZS5hY3RpdmUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGltbWFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGRpbW1hYmxlLmFkZENsYXNzKGNsYXNzTmFtZS5kaW1tYWJsZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkaW1tZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGRpbW1hYmxlLmFkZENsYXNzKGNsYXNzTmFtZS5kaW1tZWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFnZURpbW1lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkZGltbWVyLmFkZENsYXNzKGNsYXNzTmFtZS5wYWdlRGltbWVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRkaW1tZXIuYWRkQ2xhc3MoY2xhc3NOYW1lLmRpc2FibGVkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhcmlhdGlvbjogZnVuY3Rpb24odmFyaWF0aW9uKSB7XG4gICAgICAgICAgICB2YXJpYXRpb24gPSB2YXJpYXRpb24gfHwgc2V0dGluZ3MudmFyaWF0aW9uO1xuICAgICAgICAgICAgaWYodmFyaWF0aW9uKSB7XG4gICAgICAgICAgICAgICRkaW1tZXIuYWRkQ2xhc3ModmFyaWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiB7XG4gICAgICAgICAgYWN0aXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRkaW1tZXJcbiAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGNsYXNzTmFtZS5hY3RpdmUpXG4gICAgICAgICAgICA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkaW1tZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGRpbW1hYmxlLnJlbW92ZUNsYXNzKGNsYXNzTmFtZS5kaW1tZWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGRpbW1lci5yZW1vdmVDbGFzcyhjbGFzc05hbWUuZGlzYWJsZWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdmFyaWF0aW9uOiBmdW5jdGlvbih2YXJpYXRpb24pIHtcbiAgICAgICAgICAgIHZhcmlhdGlvbiA9IHZhcmlhdGlvbiB8fCBzZXR0aW5ncy52YXJpYXRpb247XG4gICAgICAgICAgICBpZih2YXJpYXRpb24pIHtcbiAgICAgICAgICAgICAgJGRpbW1lci5yZW1vdmVDbGFzcyh2YXJpYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzZXR0aW5nOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgIG1vZHVsZS5kZWJ1ZygnQ2hhbmdpbmcgc2V0dGluZycsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICBpZiggJC5pc1BsYWluT2JqZWN0KG5hbWUpICkge1xuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgc2V0dGluZ3MsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmKCQuaXNQbGFpbk9iamVjdChzZXR0aW5nc1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgc2V0dGluZ3NbbmFtZV0sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBzZXR0aW5nc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5nc1tuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludGVybmFsOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgIGlmKCAkLmlzUGxhaW5PYmplY3QobmFtZSkgKSB7XG4gICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBtb2R1bGUsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1vZHVsZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVbbmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWJ1ZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYoIXNldHRpbmdzLnNpbGVudCAmJiBzZXR0aW5ncy5kZWJ1Zykge1xuICAgICAgICAgICAgaWYoc2V0dGluZ3MucGVyZm9ybWFuY2UpIHtcbiAgICAgICAgICAgICAgbW9kdWxlLnBlcmZvcm1hbmNlLmxvZyhhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIG1vZHVsZS5kZWJ1ZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZS5pbmZvLCBjb25zb2xlLCBzZXR0aW5ncy5uYW1lICsgJzonKTtcbiAgICAgICAgICAgICAgbW9kdWxlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2ZXJib3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZighc2V0dGluZ3Muc2lsZW50ICYmIHNldHRpbmdzLnZlcmJvc2UgJiYgc2V0dGluZ3MuZGVidWcpIHtcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLnBlcmZvcm1hbmNlKSB7XG4gICAgICAgICAgICAgIG1vZHVsZS5wZXJmb3JtYW5jZS5sb2coYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBtb2R1bGUudmVyYm9zZSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZS5pbmZvLCBjb25zb2xlLCBzZXR0aW5ncy5uYW1lICsgJzonKTtcbiAgICAgICAgICAgICAgbW9kdWxlLnZlcmJvc2UuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZighc2V0dGluZ3Muc2lsZW50KSB7XG4gICAgICAgICAgICBtb2R1bGUuZXJyb3IgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGNvbnNvbGUuZXJyb3IsIGNvbnNvbGUsIHNldHRpbmdzLm5hbWUgKyAnOicpO1xuICAgICAgICAgICAgbW9kdWxlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwZXJmb3JtYW5jZToge1xuICAgICAgICAgIGxvZzogZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAgICAgdmFyXG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgICBleGVjdXRpb25UaW1lLFxuICAgICAgICAgICAgICBwcmV2aW91c1RpbWVcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLnBlcmZvcm1hbmNlKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lICAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNUaW1lICA9IHRpbWUgfHwgY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgIGV4ZWN1dGlvblRpbWUgPSBjdXJyZW50VGltZSAtIHByZXZpb3VzVGltZTtcbiAgICAgICAgICAgICAgdGltZSAgICAgICAgICA9IGN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgICBwZXJmb3JtYW5jZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAnTmFtZScgICAgICAgICAgIDogbWVzc2FnZVswXSxcbiAgICAgICAgICAgICAgICAnQXJndW1lbnRzJyAgICAgIDogW10uc2xpY2UuY2FsbChtZXNzYWdlLCAxKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAnRWxlbWVudCcgICAgICAgIDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAnRXhlY3V0aW9uIFRpbWUnIDogZXhlY3V0aW9uVGltZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFyVGltZW91dChtb2R1bGUucGVyZm9ybWFuY2UudGltZXIpO1xuICAgICAgICAgICAgbW9kdWxlLnBlcmZvcm1hbmNlLnRpbWVyID0gc2V0VGltZW91dChtb2R1bGUucGVyZm9ybWFuY2UuZGlzcGxheSwgNTAwKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpc3BsYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyXG4gICAgICAgICAgICAgIHRpdGxlID0gc2V0dGluZ3MubmFtZSArICc6JyxcbiAgICAgICAgICAgICAgdG90YWxUaW1lID0gMFxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgdGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1vZHVsZS5wZXJmb3JtYW5jZS50aW1lcik7XG4gICAgICAgICAgICAkLmVhY2gocGVyZm9ybWFuY2UsIGZ1bmN0aW9uKGluZGV4LCBkYXRhKSB7XG4gICAgICAgICAgICAgIHRvdGFsVGltZSArPSBkYXRhWydFeGVjdXRpb24gVGltZSddO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aXRsZSArPSAnICcgKyB0b3RhbFRpbWUgKyAnbXMnO1xuICAgICAgICAgICAgaWYobW9kdWxlU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgdGl0bGUgKz0gJyBcXCcnICsgbW9kdWxlU2VsZWN0b3IgKyAnXFwnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCRhbGxNb2R1bGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgdGl0bGUgKz0gJyAnICsgJygnICsgJGFsbE1vZHVsZXMubGVuZ3RoICsgJyknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIChjb25zb2xlLmdyb3VwICE9PSB1bmRlZmluZWQgfHwgY29uc29sZS50YWJsZSAhPT0gdW5kZWZpbmVkKSAmJiBwZXJmb3JtYW5jZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQodGl0bGUpO1xuICAgICAgICAgICAgICBpZihjb25zb2xlLnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS50YWJsZShwZXJmb3JtYW5jZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHBlcmZvcm1hbmNlLCBmdW5jdGlvbihpbmRleCwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YVsnTmFtZSddICsgJzogJyArIGRhdGFbJ0V4ZWN1dGlvbiBUaW1lJ10rJ21zJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGVyZm9ybWFuY2UgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludm9rZTogZnVuY3Rpb24ocXVlcnksIHBhc3NlZEFyZ3VtZW50cywgY29udGV4dCkge1xuICAgICAgICAgIHZhclxuICAgICAgICAgICAgb2JqZWN0ID0gaW5zdGFuY2UsXG4gICAgICAgICAgICBtYXhEZXB0aCxcbiAgICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgICAgcmVzcG9uc2VcbiAgICAgICAgICA7XG4gICAgICAgICAgcGFzc2VkQXJndW1lbnRzID0gcGFzc2VkQXJndW1lbnRzIHx8IHF1ZXJ5QXJndW1lbnRzO1xuICAgICAgICAgIGNvbnRleHQgICAgICAgICA9IGVsZW1lbnQgICAgICAgICB8fCBjb250ZXh0O1xuICAgICAgICAgIGlmKHR5cGVvZiBxdWVyeSA9PSAnc3RyaW5nJyAmJiBvYmplY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcXVlcnkgICAgPSBxdWVyeS5zcGxpdCgvW1xcLiBdLyk7XG4gICAgICAgICAgICBtYXhEZXB0aCA9IHF1ZXJ5Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAkLmVhY2gocXVlcnksIGZ1bmN0aW9uKGRlcHRoLCB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgY2FtZWxDYXNlVmFsdWUgPSAoZGVwdGggIT0gbWF4RGVwdGgpXG4gICAgICAgICAgICAgICAgPyB2YWx1ZSArIHF1ZXJ5W2RlcHRoICsgMV0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBxdWVyeVtkZXB0aCArIDFdLnNsaWNlKDEpXG4gICAgICAgICAgICAgICAgOiBxdWVyeVxuICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgIGlmKCAkLmlzUGxhaW5PYmplY3QoIG9iamVjdFtjYW1lbENhc2VWYWx1ZV0gKSAmJiAoZGVwdGggIT0gbWF4RGVwdGgpICkge1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdFtjYW1lbENhc2VWYWx1ZV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiggb2JqZWN0W2NhbWVsQ2FzZVZhbHVlXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICAgIGZvdW5kID0gb2JqZWN0W2NhbWVsQ2FzZVZhbHVlXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiggJC5pc1BsYWluT2JqZWN0KCBvYmplY3RbdmFsdWVdICkgJiYgKGRlcHRoICE9IG1heERlcHRoKSApIHtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBvYmplY3RbdmFsdWVdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYoIG9iamVjdFt2YWx1ZV0gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IG9iamVjdFt2YWx1ZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5lcnJvcihlcnJvci5tZXRob2QsIHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggZm91bmQgKSApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gZm91bmQuYXBwbHkoY29udGV4dCwgcGFzc2VkQXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihmb3VuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGZvdW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZigkLmlzQXJyYXkocmV0dXJuZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybmVkVmFsdWUucHVzaChyZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYocmV0dXJuZWRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm5lZFZhbHVlID0gW3JldHVybmVkVmFsdWUsIHJlc3BvbnNlXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihyZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm5lZFZhbHVlID0gcmVzcG9uc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmb3VuZDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbW9kdWxlLnByZWluaXRpYWxpemUoKTtcblxuICAgICAgaWYobWV0aG9kSW52b2tlZCkge1xuICAgICAgICBpZihpbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbW9kdWxlLmluaXRpYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICBtb2R1bGUuaW52b2tlKHF1ZXJ5KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZihpbnN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5zdGFuY2UuaW52b2tlKCdkZXN0cm95Jyk7XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlLmluaXRpYWxpemUoKTtcbiAgICAgIH1cbiAgICB9KVxuICA7XG5cbiAgcmV0dXJuIChyZXR1cm5lZFZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgPyByZXR1cm5lZFZhbHVlXG4gICAgOiB0aGlzXG4gIDtcbn07XG5cbiQuZm4uZGltbWVyLnNldHRpbmdzID0ge1xuXG4gIG5hbWUgICAgICAgIDogJ0RpbW1lcicsXG4gIG5hbWVzcGFjZSAgIDogJ2RpbW1lcicsXG5cbiAgc2lsZW50ICAgICAgOiBmYWxzZSxcbiAgZGVidWcgICAgICAgOiBmYWxzZSxcbiAgdmVyYm9zZSAgICAgOiBmYWxzZSxcbiAgcGVyZm9ybWFuY2UgOiB0cnVlLFxuXG4gIC8vIG5hbWUgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBtdWx0aXBsZSBkaW1tZXJzIGluIGNvbnRleHRcbiAgZGltbWVyTmFtZSAgOiBmYWxzZSxcblxuICAvLyB3aGV0aGVyIHRvIGFkZCBhIHZhcmlhdGlvbiB0eXBlXG4gIHZhcmlhdGlvbiAgIDogZmFsc2UsXG5cbiAgLy8gd2hldGhlciB0byBiaW5kIGNsb3NlIGV2ZW50c1xuICBjbG9zYWJsZSAgICA6ICdhdXRvJyxcblxuICAvLyB3aGV0aGVyIHRvIHVzZSBjc3MgYW5pbWF0aW9uc1xuICB1c2VDU1MgICAgICA6IHRydWUsXG5cbiAgLy8gY3NzIGFuaW1hdGlvbiB0byB1c2VcbiAgdHJhbnNpdGlvbiAgOiAnZmFkZScsXG5cbiAgLy8gZXZlbnQgdG8gYmluZCB0b1xuICBvbiAgICAgICAgICA6IGZhbHNlLFxuXG4gIC8vIG92ZXJyaWRpbmcgb3BhY2l0eSB2YWx1ZVxuICBvcGFjaXR5ICAgICA6ICdhdXRvJyxcblxuICAvLyB0cmFuc2l0aW9uIGR1cmF0aW9uc1xuICBkdXJhdGlvbiAgICA6IHtcbiAgICBzaG93IDogNTAwLFxuICAgIGhpZGUgOiA1MDBcbiAgfSxcblxuICBvbkNoYW5nZSAgICA6IGZ1bmN0aW9uKCl7fSxcbiAgb25TaG93ICAgICAgOiBmdW5jdGlvbigpe30sXG4gIG9uSGlkZSAgICAgIDogZnVuY3Rpb24oKXt9LFxuXG4gIGVycm9yICAgOiB7XG4gICAgbWV0aG9kICAgOiAnVGhlIG1ldGhvZCB5b3UgY2FsbGVkIGlzIG5vdCBkZWZpbmVkLidcbiAgfSxcblxuICBjbGFzc05hbWUgOiB7XG4gICAgYWN0aXZlICAgICA6ICdhY3RpdmUnLFxuICAgIGFuaW1hdGluZyAgOiAnYW5pbWF0aW5nJyxcbiAgICBkaW1tYWJsZSAgIDogJ2RpbW1hYmxlJyxcbiAgICBkaW1tZWQgICAgIDogJ2RpbW1lZCcsXG4gICAgZGltbWVyICAgICA6ICdkaW1tZXInLFxuICAgIGRpc2FibGVkICAgOiAnZGlzYWJsZWQnLFxuICAgIGhpZGUgICAgICAgOiAnaGlkZScsXG4gICAgcGFnZURpbW1lciA6ICdwYWdlJyxcbiAgICBzaG93ICAgICAgIDogJ3Nob3cnXG4gIH0sXG5cbiAgc2VsZWN0b3I6IHtcbiAgICBkaW1tZXIgICA6ICc+IC51aS5kaW1tZXInLFxuICAgIGNvbnRlbnQgIDogJy51aS5kaW1tZXIgPiAuY29udGVudCwgLnVpLmRpbW1lciA+IC5jb250ZW50ID4gLmNlbnRlcidcbiAgfSxcblxuICB0ZW1wbGF0ZToge1xuICAgIGRpbW1lcjogZnVuY3Rpb24oKSB7XG4gICAgIHJldHVybiAkKCc8ZGl2IC8+JykuYXR0cignY2xhc3MnLCAndWkgZGltbWVyJyk7XG4gICAgfVxuICB9XG5cbn07XG5cbn0pKCBqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQgKTtcbiJdfQ==
