$.tablesort=function(t,e){var s=this;this.$table=t,this.settings=$.extend({},$.tablesort.defaults,e),this.$table.find("thead th").bind("click.tablesort",function(){$(".pagination select option").length>1&&e.func?($.extend(e),s.sortBackEnd($(this))):$(this).hasClass("disabled")||s.sort($(this))}),this.index=null,this.$th=null,this.direction=[]},$.tablesort.prototype={sortBackEnd:function(t,e){var s=this,i=this.$table,a=(i.find("tbody tr"),t.index(),t.children("div")),n=a.hasClass(s.settings.asc)?s.settings.desc:s.settings.asc;s.$table.find("thead th div").removeClass(s.settings.asc+" "+s.settings.desc),a.addClass(n),$.func()},sort:function(t,e){var s=new Date,i=this,a=this.$table,n=a.find("tbody tr"),r=t.index(),o=t.children("div"),d=[],l=$("<div/>"),c=function(t,e,s){var i;return t.data().sortBy?(i=t.data().sortBy,"function"==typeof i?i(t,e,s):i):e.data("sort")?e.data("sort"):e.text()},h=function(t,e){var s,i,a,n=/(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,r=/(^[ ]*|[ ]*$)/g,o=/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,d=/^0x[0-9a-f]+$/i,l=/^0/,c=function(t){return(""+t).toLowerCase().replace(",","")},h=c(t).replace(r,"")||"",$=c(e).replace(r,"")||"",f=h.replace(n,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),u=$.replace(n,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),b=Math.max(f.length,u.length),g=parseInt(h.match(d),10)||1!=f.length&&h.match(o)&&Date.parse(h),p=parseInt($.match(d),10)||g&&$.match(o)&&Date.parse($)||null;if(p){if(g<p)return-1;if(g>p)return 1}for(a=0;a<b;a++){if(s=!(f[a]||"").match(l)&&parseFloat(f[a])||f[a]||0,i=!(u[a]||"").match(l)&&parseFloat(u[a])||u[a]||0,isNaN(s)!==isNaN(i))return isNaN(s)?1:-1;if(typeof s!=typeof i&&(s+="",i+=""),s<i)return-1;if(s>i)return 1}return 0};0!==n.length&&(i.$table.find("thead th div").removeClass(i.settings.asc+" "+i.settings.desc),this.$th=t,this.index!=r?this.direction[r]="desc":"asc"!==e&&"desc"!==e?this.direction[r]="desc"===this.direction[r]?"asc":"desc":this.direction[r]=e,this.index=r,e="asc"==this.direction[r]?1:-1,i.$table.trigger("tablesort:start",[i]),i.log("Sorting by "+this.index+" "+this.direction[r]),n.sort(function(s,a){var n=$(s),r=$(a),o=n.index(),l=r.index();return d[o]?s=d[o]:(s=c(t,i.cellToSort(s),i),d[o]=s),d[l]?a=d[l]:(a=c(t,i.cellToSort(a),i),d[l]=a),h(s,a)*e}),n.each(function(t,e){l.append(e)}),a.append(l.html()),o.addClass(i.settings[i.direction[r]]),i.log("Sort finished in "+((new Date).getTime()-s.getTime())+"ms"),i.$table.trigger("tablesort:complete",[i]))},cellToSort:function(t){return $($(t).find("td").get(this.index))},log:function(t){($.tablesort.DEBUG||this.settings.debug)&&console&&console.log&&console.log("[tablesort] "+t)},destroy:function(){return this.$table.find("thead th").unbind("click.tablesort"),this.$table.data("tablesort",null),null}},$.tablesort.DEBUG=!1,$.tablesort.defaults={debug:$.tablesort.DEBUG,asc:"ascending",desc:"descending"},$.fn.tablesort=function(t){var e,s;return this.each(function(){e=$(this),s=e.data("tablesort"),s&&s.destroy(),e.data("tablesort",new $.tablesort(e,t))})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
