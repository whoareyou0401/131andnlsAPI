!function(e,t){"object"==typeof exports&&"string"!=typeof exports.nodeName?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("FileSaver requires a window with a document");return t(e)}:t(e)}(window||this,function(e,t){"use strict";if(!("undefined"==typeof e||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var n=e.document,o=function(){return e.URL||e.webkitURL||e},r=n.createElementNS("http://www.w3.org/1999/xhtml","a"),a="download"in r,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},c=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},d="application/octet-stream",s=4e4,l=function(e){var t=function(){"string"==typeof e?o().revokeObjectURL(e):e.remove()};setTimeout(t,s)},p=function(e,t,n){t=[].concat(t);for(var o=t.length;o--;){var r=e["on"+t[o]];if("function"==typeof r)try{r.call(e,n||e)}catch(a){u(a)}}},v=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob([String.fromCharCode(65279),e],{type:e.type}):e},w=function(t,n,u){u||(t=v(t));var s,w=this,m=t.type,y=m===d,h=function(){p(w,"writestart progress write writeend".split(" "))},S=function(){if((f||y&&c)&&e.FileReader){var n=new FileReader;return n.onloadend=function(){var t=f?n.result:n.result.replace(/^data:[^;]*;/,"data:attachment/file;"),o=e.open(t,"_blank");o||(e.location.href=t),t=void 0,w.readyState=w.DONE,h()},n.readAsDataURL(t),void(w.readyState=w.INIT)}if(s||(s=o().createObjectURL(t)),y)e.location.href=s;else{var r=e.open(s,"_blank");r||(e.location.href=s)}w.readyState=w.DONE,h(),l(s)};return w.readyState=w.INIT,a?(s=o().createObjectURL(t),void setTimeout(function(){r.href=s,r.download=n,i(r),h(),l(s),w.readyState=w.DONE})):void S()},m=w.prototype,y=function(e,t,n){return new w(e,t||e.name||"download",n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,n){return t=t||e.name||"download",n||(e=v(e)),navigator.msSaveOrOpenBlob(e,t)}:(m.abort=function(){},m.readyState=m.INIT=0,m.WRITING=1,m.DONE=2,m.error=m.onwritestart=m.onprogress=m.onwrite=m.onabort=m.onerror=m.onwriteend=null,"function"==typeof define&&define.amd&&define("file-saverjs",[],function(){return y}),"undefined"==typeof t&&(e.saveAs=y),y)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
