!function(e){"use strict";setupCSRF();var t="/api/v1.2/recommendorder/bagman/customer/"+window.customer_id+"/cart";Vue.filter("toFixed",function(e,t){return Number(Number(e).toFixed(t))});var r=(new Vue({el:"header",beforeCreate:function(){var e=getCookie("user_role");this.isSalesman="salesman"===e},data:{addGifts:""},methods:{back:function(){self.location=document.referrer},addGift:function(){window.location.href="/recommendorder/customer/"+window.customer_id+"/add-gift"}}}),new Vue({el:"#cart-items",data:{dealers:[],insufficient_items:[],bus_hr_from:"",bus_hr_to:"",sum:0,recommendUrl:"/recommendorder/customer/"+window.customer_id+"/recommend",customerProfile:"/recommendorder/bagman/customer/"+window.customer_id+"/profile",dealerListUrl:"/recommendorder/customer/"+window.customer_id+"/dealer-list"},watch:{sum:function(e,t){e>0?$("#placeorder").css("background","#ff4a0c"):0===e&&$("#placeorder").css("background","#dbdbdb")}},methods:{init:function(){var e=this;$.ajax({url:t,type:"get",success:function(t){console.log(t),e.dealers=t.items,e.sum=t.sum,0===e.dealers.length?$(".blank").show():$(".dealers-con").show(),e.sum>0?$("#placeorder").css("background","#ff4a0c"):0===e.sum&&$("#placeorder").css("background","#dbdbdb")}})},add:function(e,r){var s=this,i={};setupCSRF(),i[e.item_id]=r,$.ajax({url:t,type:"put",data:i,success:function(e){s.init()}})},set:function(e,r){setupCSRF();var s=this,i={};i[r.item_id]=event.target.value,console.log(r.is_giveaway),$.ajax({url:t,type:"post",data:i,success:function(e){s.init()}})},dAllSelected:function(e){for(var t=0;t<this.dealers.length;t++)if((this.dealers[t].id===e||void 0===e)&&this.dealers[t].selected===!1)return!1;return!0},dSelectAll:function(e,r){var s=this,i={};i.items=[];var o,d=!0;for(o=0;o<this.dealers.length;o++)if((this.dealers[o].id===r||void 0===r)&&this.dealers[o].selected===!1){d=!1;break}for(o=0;o<this.dealers.length;o++)this.dealers[o].id!==r&&void 0!==r||this.dealers[o].selected===d&&i.items.push(this.dealers[o].item_id);setupCSRF(),$.ajax({url:t,type:"patch",data:i,success:function(e){s.init()}})},select:function(e,r){var s=this,i={};setupCSRF(),i.items=[r],$.ajax({url:t,type:"patch",data:i,success:function(e){s.init()}})},sendChecked:function(e,t){return{send_no:e>t,send_checked:e<=t}},dhref:function(e){return"/recommendorder/dealer/"+e+"/customer/"+window.customer_id+"/bagman-add-item"},confirmOrder:function(){window.location.href="/recommendorder/bagman/customer/"+window.customer_id+"/confirm-order"},giveawayIconSrc:function(e){return"/static/images/recommendorder/full_"+Number(e).toFixed(0)+".png"},closeDeleteInsItems:function(){$("footer").removeClass("gs-blur"),$(".del-understock-model").hide()},clearUnderstock:function(){var e=this;$("footer").removeClass("gs-blur"),$(".del-understock-model").hide();var r,s,i={items:[]};for(r=0;r<this.insufficient_items.length;r++)for(s=0;s<this.insufficient_items[r].items.length;s++)i.items.push(this.insufficient_items[r].items[s].id);$.ajax({url:t,type:"delete",data:i,success:function(t){$(".understock-model").show(),setTimeout(function(){$(".understock-model").hide()},1e3),e.init()}})},addProduct:function(){window.location.href="/recommendorder/customer/"+window.customer_id+"/dealer-list"}}}));r.init()}(window.cmApp=window.cmApp||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
