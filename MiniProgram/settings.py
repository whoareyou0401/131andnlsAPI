"""
Django settings for MiniProgram project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.utils.translation import ugettext_lazy as _
from os.path import abspath, basename, dirname, join, normpath
from os import environ
from sys import path
# import dj_database_url
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'k2yu@_!ti&f*bnx2g@ougz+0vctw$vvobegm8&p@l!lr=w6*)^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*']
AUTH_USER_MODEL = 'user.CMUser'
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    # "django.contrib.auth.backends.ModelBackend",
    "user.auth.CmBackend",
    # allauth specific authentication methods, such as login by e-mail
    # "allauth.account.auth_backends.AuthenticationBackend",
)
DJANGO_ROOT = dirname(dirname(abspath(__file__)))
SITE_ROOT = dirname(DJANGO_ROOT)

# Site name:
SITE_NAME = basename(DJANGO_ROOT)

# Add our project to our pythonpath, this way we don't need to type our project
# name in our dotted import paths:
path.insert(0, SITE_ROOT)
path.insert(0, DJANGO_ROOT)
# END PATH CONFIGURATION

# PROJECT DIR for EASY-MODE I18L
PROJECT_DIR = os.path.dirname(__file__)
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        ('django.contrib.auth.password_validation.'
         'UserAttributeSimilarityValidator'),
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dailystatement',
    'pay',
    'user',
    'core',
    'shopplus',
    'utils'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'MiniProgram.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MiniProgram.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
BD_NAME = os.environ.get('OLD_DB_NAME')
DB_USER = os.environ.get('OLD_DB_USER')
DB_PWD = os.environ.get('OLD_DB_PASSWORD')
OLD_DB_IP = os.environ.get('OLD_DB_IP')
OLD_DB_PORT = str(os.environ.get('OLD_DB_PORT'))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': BD_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PWD,
        'HOST': OLD_DB_IP,
        'PORT': OLD_DB_PORT
    }
}
BUSSINESS_DB_URL = "postgresql://mo_tse:motse!2018@139.199.112.199:1234/old"

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SMALL_WEIXIN_OPENID_URL = 'https://api.weixin.qq.com/sns/jscode2session'
SMALL_WEIXIN_TOKEN_VALID_TIME = 3600 * 7 * 24
DAILYSTATE_WEIXIN_APPID = environ.get('WX_DAILYSTATE_APPID')
DAILYSTATE_WEIXIN_SECRET = environ.get('WX_DAILYSTATE_SECRET')

WX_SCAN_PAY_APPID = environ.get('WX_SCAN_PAY_APPID')
WX_SCAN_PAY_SECRET = environ.get('WX_SCAN_PAY_SECRET')

WEIXIN_PAY_API_KEY = environ.get('SCAN_WEIXIN_PAY_API_KEY')
WEIXIN_PAY_MCH_ID = environ.get('SCAN_WEIXIN_PAY_MCH_ID')
STD_DB_URL = environ.get('STD_DB_URL')
MINIERP_APPID = environ.get('MINIERP_APPID')
MINIERP_SECRET = environ.get('MINIERP_SECRET')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

DAILYSTATE_WEIXIN_APPID = environ.get('WX_DAILYSTATE_APPID')
DAILYSTATE_WEIXIN_SECRET = environ.get('WX_DAILYSTATE_SECRET')
VERIFY_CODE_REDIS_DAY_TIMEOUT = 24 * 60 * 60

CM_QQ_APPID = environ.get('CM_QQ_APPID')
CM_QQ_SECRET = environ.get('CM_QQ_SECRET')
STD_DB_URL = environ.get('STD_DB_URL')
CM_GAODE_MAP_URL = 'http://restapi.amap.com/v3/geocode/geo'
GAODE_MAP_KEY = environ.get('GAODE_MAP_KEY')

# the unit is meter
CM_DISCOVER_RADIUS = 15000
OLD_DB = environ.get('OLD_DB_URL')
CM_GAODE_MAP_TO_ADDRESS_URL = 'http://restapi.amap.com/v3/geocode/regeo'